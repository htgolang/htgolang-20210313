1. 复习
2. 作业
3. 新内容
    函数
        功能:
            代码功能明确
            代码复用
        含义：为代码片段定义一个名称

        定义&调用
            func 函数名称() {

            }

            函数名称()

            func 函数名称(函数参数) 返回值 {
                函数体
            }

            函数名称:  标识符规范
            函数参数(形参):  可以是任意多个
                        参数: 参数名称(变量名) 参数类型
                        定义参数就是定义一个变量，作用域为函数体，只能在函数体内使用
                        多个参数用逗号分隔
                        可变参数
            返回值: 可以是任意多个
                无返回值不定义
                有一个返回值: 返回值的类型
                多个返回值: 定义所有返回值的类型, 用逗号分隔，()包含
                返回可以定义名称(命名返回值)

                有返回值一定要用return x, return xxx, xxx

            函数调用
            函数名称(实参参数)
                实参 =》 形参
                    数量 一致
                    类型按顺序一致
                    数据按照顺序传递

        参数/返回值
        递归
            函数间接/直接调用调用自己
            分治问题：将一个大问题拆分N个相同解决方法的小问题
            阶乘
                n != n>= 1 => n * n - 1 * n-3 .... 1
                    n = 0 => 1
                f(n) = n!
                n! = n * (n-1)! n >= 1
                n-1 ! = n - 1 * n-2 !

                2! = 2 * 1!
                1! = 1
            汉诺塔
        函数类型
            定义函数类型的变量 赋值 函数, 调用 //高阶函数
        匿名函数
        闭包：有的时候匿名函数也叫闭包
            在(外部)函数内部定义匿名函数 引用外部函数的变量

        变量的生命周期 => 从变量创建 到销毁的过程
        变量作用域 => 变量可以使用的范围

        类型
            值类型
            引用类型
            var t T
            tmp := t
            tmp 进行修改 可能影响到t => 引用类型
                         任何操作都不能影响t => 值类型

            int, string, bool, 数组, 结构体
            ps := pointer
            ps
            切片，映射
        值传递
            形参 = 实参(内存地址=>value） value）赋值给形参
            形参是实参的副本
            tmp := t
            引用类型: 切片 地址( value => data地址 cap len)
                    形参      data赋值一份
                                cap 赋值一份
                                len 赋值一份


    错误处理:
        go标准建议显示的将错误信息通过函数参数返回给调用者，由调用者自行处理
        异常
        func() (xxx xxx, error)
        strconv.Parse***
        strconv.Atoi

        panic 捕获错误 recover => 需要防止在延迟执行内部
    延迟执行
        执行函数是 不管内部逻辑是否发生错误，都想要执行的代码

    单步调试:
        dlv