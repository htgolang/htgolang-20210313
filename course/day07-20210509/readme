1. 复习 10分钟
    文件/文件夹/文件路径
    ioutil/fmt/filepath/io
    bufio
    文件内容: csv, gob(只能在go语言中使用)
    strings.Builder/Reader bytes.Buffer/Reader

2. 作业
    5.1日练习：编写hasher命令支持计算与globfomatpath匹配的所有文件的md5，sha1，sha256，并进行输出

    注意：
    0.命令格式 hasher --md5 --sha1 --sha256 globformatpath
    1.文件大小不限，可以支持100G大小的文件计算
    2. 输出：输出为表格形式每行一个文件信息，顺序为：文件路径（绝对路径），md5，sha1，sha256。需要输出表头信息（path，md5，sha1，sha256)，列由命令行参数决定，如hasher -md5 glob，只有文件路径和md5列。若无文件信息，输出表头和表体（表体内容输出-empty-）
    4.在文件名中加入中文，尝试执行，表格是否对齐，查看tablewriter包如何使用，并解决中文对齐问题（https://github.com/olekukonko/tablewriter）

    5.2日练习：编写password工具对密码信息进行加密（hash）和验证
    注意：
    0.命令格式：
    a.生成密码hash：password -g -t 加密方式 -r -s 盐 密码，输出结果密码加密结果
    b.密码检查：password -c -h 密码hash值 用户密码，输出success或failure
    参数说明，-g生成密码 -t加密方式，支持sha1，md5，sha256，sha512，-r生成长度为6的随机盐，-s指定盐（与-r同时存在时-s指定的盐优先使用），盐字符串只能由数字和大小写英文字母组成，-c检查密码（不能与-g同时存在），-h验证的密码hash


    密码加盐解决的问题
    固定的字符串 => md5 => 固定的hash => 不能逆向得到字符串
                          固定长度的 => 集合有限 md5 32位 0-F 16  16 ^ 32 -1
                          16 ^ 32样本 某两个字符串 hash一样 hash碰撞 => 增加hash长度 => sha256 sha512

    a md5 hasha
    b md5 hashb
    c md5 hashc

    自己生成样本 计算 hash存储在数据库中 从数据库中查询hash得到原始密码(彩虹表)

    password  salt(随机生成)
    combind(salt, password) 连接 salt + "$$" + password
    md5() => hash

    bcrypt


    5.3日练习：编写nginx配置文件生成工具（web服务常使用nginx作为代理服务对外提供api，所以需要对nginx进行想换配置，但手工方式容易产生错误)，在nginx配置时常需要指定服务名，端口，是否开启ssl，若开启，需要指定ssl证书，后端代理服务ip端口（可能需要使用负载均衡对外提供高可用的服务支持，暂定后端均使用http协议）
    注意：
    0. 命令
    nginx_conf_gen -o nginx.conf -c globpath
    说明：-o指定输出文件路径 -c指定生成nginx配置文件的所有配置数据文件（每个配置文件对应一个nginx中server节点） 其中格式为key=value的行（key表示数据名如服务名称，端口，是否开启ssl等），对于多个配置信息使用key.number标识如upstream中指定多个server时，upstream.server.0=192.168.0.10:8000，upstream.server.1=192.168.0.11:8000（key可以自己设计命名规则）

    5.4日练习，统计web访问日志中三个结果
    a.每个状态码出现次数
    200 1000
    404 300
    500 20
    302 500
    b.每个ip出现次数及出现次数最多的前10个（次数相同按ip字符串递增顺序取）
    8.8.8.8 20
    1.1.1.1 10
    2.2.2.2 10
    3.3.3.3 10

    c.出现次数最多的前10个ip每种状态码的出现次数
    8.8.8.8 200 100
    1.1.1.1 200 30
    1.1.1.1 404 50
    2.2.2.2 301 50
    2.2.2.2 200 60


    5.5日练习，来个简单的算法，按从小到大顺序合并两个有序的（从小到大）的切片｛2，5，6｝和｛2，3，4，6｝
    结果：｛2，2，3，4，5，6，6｝

3. 新内容
        数据 + 行为=> 结构体属性，方法

    接口
        os.File: read, write
        strings.Builder: write
        strings.Reader: read
        bytes.Buffer: write, read
        bytes.Reader: read
        bufio.Writer: write
        bufio.Reader: read
        bufio.Scanner: read

        对行为的抽象
        savegob
        savecsv

        gobPersistent.save([]user)
        csvPersistent.save([]user)

        save(Type)

        行为抽象的对象 => 实现行为的对象


        解决问题

        定义
            接口：定义的一些函数（0，1，n）
                签名: 函数名称, 参数列表，返回值列表

            关键字: interface

            type TypeName Formatter

            type InterfaceName interface{
                方法签名
            }

        声明&赋值&使用
        类型断言&查询
        接口(匿名)嵌入
        匿名接口
        空接口

    反射
        1. Type, Value
        2. 使用反射
        3. 反射应用(内部实现使用反射): json、xml
            xml => go对象
            Go 对象 => json/xml/yaml/protobuf.Marshal => txt
            txt 和目标文本格式相同 => 再使用json/xml/yaml/protobuf Unmarshal

    技术+业务
        语言只是一个工具 语法，库(标准库&第三方库), 其他技术, 业务知识
        spec => 3千行